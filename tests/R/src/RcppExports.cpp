// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// aa_runif
Rcpp::NumericVector aa_runif(int n, int seed);
RcppExport SEXP _aarand_aa_runif(SEXP nSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(aa_runif(n, seed));
    return rcpp_result_gen;
END_RCPP
}
// aa_rnorm
Rcpp::NumericVector aa_rnorm(int n, int seed);
RcppExport SEXP _aarand_aa_rnorm(SEXP nSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(aa_rnorm(n, seed));
    return rcpp_result_gen;
END_RCPP
}
// aa_rexp
Rcpp::NumericVector aa_rexp(int n, int seed);
RcppExport SEXP _aarand_aa_rexp(SEXP nSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(aa_rexp(n, seed));
    return rcpp_result_gen;
END_RCPP
}
// aa_shuffle
Rcpp::IntegerVector aa_shuffle(Rcpp::IntegerVector input, int seed);
RcppExport SEXP _aarand_aa_shuffle(SEXP inputSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(aa_shuffle(input, seed));
    return rcpp_result_gen;
END_RCPP
}
// aa_sample
Rcpp::IntegerVector aa_sample(Rcpp::IntegerVector input, int s, int seed);
RcppExport SEXP _aarand_aa_sample(SEXP inputSEXP, SEXP sSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(aa_sample(input, s, seed));
    return rcpp_result_gen;
END_RCPP
}
// aa_sample_n
Rcpp::IntegerVector aa_sample_n(int n, int s, int seed);
RcppExport SEXP _aarand_aa_sample_n(SEXP nSEXP, SEXP sSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(aa_sample_n(n, s, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aarand_aa_runif", (DL_FUNC) &_aarand_aa_runif, 2},
    {"_aarand_aa_rnorm", (DL_FUNC) &_aarand_aa_rnorm, 2},
    {"_aarand_aa_rexp", (DL_FUNC) &_aarand_aa_rexp, 2},
    {"_aarand_aa_shuffle", (DL_FUNC) &_aarand_aa_shuffle, 2},
    {"_aarand_aa_sample", (DL_FUNC) &_aarand_aa_sample, 3},
    {"_aarand_aa_sample_n", (DL_FUNC) &_aarand_aa_sample_n, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_aarand(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
